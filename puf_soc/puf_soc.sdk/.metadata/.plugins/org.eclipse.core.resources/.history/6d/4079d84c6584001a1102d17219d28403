/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include <xgpio.h>
#include "xparameters.h"
#include "sleep.h"
#include <stdio.h>


int main()
{
	   XGpio gpio1, gpio2;
	   unsigned int dataOut = 0;

	   unsigned int dataSample[10][64];
	   unsigned int finalData[64];

	   XGpio_Initialize(&gpio1, XPAR_AXI_GPIO_1_DEVICE_ID);	//initialize input XGpio variable
	   XGpio_Initialize(&gpio2, XPAR_AXI_GPIO_0_DEVICE_ID);	//initialize output XGpio variable

	   XGpio_SetDataDirection(&gpio1, 1, 0xF);	//set first channel tristate buffer to input
	   XGpio_SetDataDirection(&gpio1, 2, 0x1);	//enable signal

	   XGpio_SetDataDirection(&gpio2, 1, 0x0);		//set first channel tristate buffer to output
	   XGpio_SetDataDirection(&gpio2, 2, 0x3);	//challenge

	   XGpio_DiscreteWrite(&gpio1, 2, 0x0);


	   XGpio_DiscreteWrite(&gpio2, 2, 0x0);
	   usleep(2000);
	   XGpio_DiscreteWrite(&gpio1, 2, 0x1);

    init_platform();

    printf("printing data\n\n");
for(int iter=0; iter<10; iter++) {
    for (int i = 15; i >= 0; i--) {

    	XGpio_DiscreteWrite(&gpio2, 1, i);	//write switch data to the LEDs

    	usleep(2000);

    	dataOut = XGpio_DiscreteRead(&gpio1, 1);	//get button data

    	for (int k =0; k<4;k++) {
    		dataSample[iter][i*4+k] = dataOut & 1;
    		printf("%u", dataSample[iter][i*4+k]);
    		dataOut = dataOut>>1;
    	}

    }
    printf("\n\n");
}
    cleanup_platform();
    return 0;
}
